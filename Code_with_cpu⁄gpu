import cv2
import time
import numpy as np  

def enhance_video(frame, alpha=1.3, beta=70, saturation=1.0, hue=0, iterations=1):
    enhanced_frame = cv2.convertScaleAbs(frame, alpha=alpha, beta=beta)
    hsv_frame = cv2.cvtColor(enhanced_frame, cv2.COLOR_BGR2HSV)
    hsv_frame[:, :, 1] = np.clip(hsv_frame[:, :, 1] * saturation, 0, 255)
    hsv_frame[:, :, 0] = (hsv_frame[:, :, 0] + hue) % 180 
    enhanced_frame = cv2.cvtColor(hsv_frame, cv2.COLOR_HSV2BGR)

    for _ in range(iterations):
        gray = cv2.cvtColor(enhanced_frame, cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray, 100, 200)
        edges_colored = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
        enhanced_frame = cv2.addWeighted(enhanced_frame, 0.8, edges_colored, 0.2, 0)
    
    return enhanced_frame

cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Error: Could not access webcam.")
    exit()

frame_rate = 10
alpha = 1.3  
beta = 70   
saturation = 1.0  
hue = 0           
iterations = 1   

fps_counter = 0
fps_start_time = time.time()
current_fps = 0

try:
    while True:
        start_time = time.time()  
        ret, frame = cap.read()
        if not ret:
            print("Error: Could not read frame from webcam.")
            break

        fps_counter += 1
        if time.time() - fps_start_time >= 1: 
            current_fps = fps_counter  
            fps_counter = 0
            fps_start_time = time.time()

        processed_frame = enhance_video(frame, alpha, beta, saturation, hue, iterations)
        combined_frame = cv2.hconcat([frame, processed_frame])

        cv2.putText(combined_frame, f'FPS: {current_fps}', (10, 30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
        cv2.putText(combined_frame, f'Alpha: {alpha:.1f}, Beta: {beta}, Saturation: {saturation:.1f}, Hue: {hue}, Iterations: {iterations}', (10, 70), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)

        cv2.imshow('Raw Video Vs Enhanced Video', combined_frame)

        key = cv2.waitKey(int(1000 / frame_rate)) & 0xFF
    
        if key == ord('q'):
            print("Thank You. Exiting...")
            break
        elif key == ord('+'):  
            frame_rate +=  1
            print(f"Frame rate increased to: {frame_rate} FPS")
        elif key == ord('-'): 
            frame_rate = max(1, frame_rate - 1)  
            print(f"Frame rate decreased to: {frame_rate} FPS")
        elif key == ord('a'):  
            alpha += 0.1
            alpha = min(3.0, alpha)  
            print(f'Alpha increased to: {alpha:.1f}')
        elif key == ord('s'): 
            alpha = max(0, alpha - 0.1)  
            print(f'Alpha decreased to: {alpha:.1f}')
        elif key == ord('d'): 
            beta += 5
            beta = min(100, beta)  
            print(f'Beta increased to: {beta}')
        elif key == ord('f'): 
            beta = max(0, beta - 5) 
            print(f'Beta decreased to: {beta}')
        elif key == ord('g'):  
            saturation += 0.1
            saturation = min(3.0, saturation)  
            print(f'Saturation increased to: {saturation:.1f}')
        elif key == ord('h'):  
            saturation = max(0, saturation - 0.1)  
            print(f'Saturation decreased to: {saturation:.1f}')
        elif key == ord('j'):  
            hue += 5
            hue = min(180, hue)  
            print(f'Hue increased to: {hue}')
        elif key == ord('k'): 
            hue = max(-180, hue - 5) 
            print(f'Hue decreased to: {hue}')
        elif key == ord('z'):  
            iterations += 1
            print(f'Iterations increased to: {iterations}')
        elif key == ord('x'):  
            iterations = max(1, iterations - 1)  
            print(f'Iterations decreased to: {iterations}')

except KeyboardInterrupt:
    print("Interrupted by user.")

finally:
    cap.release()
    cv2.destroyAllWindows()